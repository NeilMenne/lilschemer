(load "src/lilschemer.scm")
(in-test-group
  Chapter1
  (define-test (lists-are-not-atoms)
    (define l (list 1 2 3))
    (assert-false (atom? l) "Lists are not atoms")
  )
  (define-test (arbitrary-eval)
    (assert-true (atom? 'example) "Nailed it!")
  )
  (define-test (numbers-are-atoms)
    (assert-true (atom? 3) "Integer numbers are atoms")
    (assert-true (atom? 3.5) "Decimal numbers are atoms")
    (assert-true (atom? 2/3) "Fractional numbers are atoms")
  )
  (define-test (strings-are-atoms)
    (assert-true (atom? "test") "Strings are atoms")
  )
  (define-test (symbols-are-atoms)
    (assert-true (atom? 'a) "Arbitrary symbols are atoms")
  )
)

(in-test-group
  Chapter2
  (define-test (list-of-atoms)
    (define l '(1 2 3))
    (assert-true (lat? l) "List is only composed of atoms")
  )
  (define-test (list-of-atoms-2)
    (define l '(thing1 thing2 thing3))
    (assert-true (lat? l) "List is only composed of atoms")
  )
  (define-test (list-of-not-just-atoms)
    (define l '(1 2 '(3 4)))
    (assert-false (lat? l) "Lists that aren't only atoms return false")
  )
  (define-test (member-of-list)
    (define l '(3 2 1))
    (assert-true (member? 1 l) "1 is a member of l")
  )
)

(in-test-group
  Chapter3:Rember
  (define-test (removes-occurrence)
    (define l '(1 2 3))
    (define out-l '(1 2))
    (assert-equals out-l (rember 3 l) "Removes the only occurrence")
  )
  (define-test (removes-occurrence-two)
    (define l '(thing3 thing2 thing3))
    (define out-l '(thing2 thing3))
    (assert-equals out-l (rember 'thing3 l) "Removes only the first occurrence")
  )
  (define-test (removes-only-first-occurrence)
    (define l '(1 1 1))
    (define out-l '(1 1))
    (assert-equals out-l (rember 1 l) "Removes the first occurrence")
  )
  (define-test (does-no-harm)
    (define l '(1 2 3))
    (assert-equals l (rember 4 l) "Doesn't do anything if the item doesn't exist")
  )
  (define-test (removes-all-occurrences)
    (define l '(1 3 1 4 1))
    (define out-l '(3 4))
    (assert-equals out-l (multirember 1 l) "Multirember removes all occurrences of the atom")
  )
)

(in-test-group
  Chapter3:Firsts
  (define-test (gets-first-from-each-s-expression)
    (define l (list (list 1 2 3) (list 4 5 6) (list 6 7 8)))
    (define out-l (list 1 4 6))
    (assert-equals out-l (firsts l) "Gets the first from each of the nested s-expressions")
  )
  (define-test (gets-first-from-each-arbitrary-s-expression)
    (define l (list (list 'thing 'other) (list 'thing2 'other2) (list 'thing3 'other3)))
    (define out-l (list 'thing 'thing2 'thing3))
    (assert-equals out-l (firsts l) "Gets the first from each of the nested s-expressions")
  )
)

(in-test-group
  Chapter3:Inserts
  (define-test (inserts-to-the-right-of-another-s-expression)
    (define l (list (quote thing1) (quote thing3)))
    (define out-l (list (quote thing1) (quote thing2) (quote thing3)))
    (assert-equals out-l (insertRight (quote thing2) (quote thing1) l) "Inserts to the right of the old atom")
  )
  (define-test (inserts-to-the-right)
    (define l '(1 2 4))
    (define out-l '(1 2 3 4))
    (assert-equals out-l (insertRight 3 2 l) "Inserts the new atom after the old one")
  )
  (define-test (inserts-to-the-left)
    (define l '(1 3 4))
    (define out-l '(1 2 3 4))
    (assert-equals out-l (insertLeft 2 3 l) "Inserts the new atom to the left of the old one")
  )
  (define-test (inserts-to-the-left-s-expression)
    (define l (list (quote thing2) (quote thing3)))
    (define out-l (list (quote thing1) (quote thing2) (quote thing3)))
    (assert-equals out-l (insertLeft (quote thing1) (quote thing2) l) "Inserts the new atom to the left")
  )
  (define-test (substitutes)
    (define l '(1 5 3))
    (define out-l '(1 2 3))
    (assert-equals out-l (subst 2 5 l) "Replaces the old atom with the new atom")
  )
  (define-test (substitutes-for-the-first-of-two)
    (define l '(1 5 3 6))
    (define out-l '(1 2 3 6))
    (assert-equals out-l (subst2 2 5 6 l) "Replaces the first old atom with the new atom")
  )
  (define-test (substitutes-for-the-second-of-two)
    (define l '(1 6 3 5))
    (define out-l '(1 2 3 5))
    (assert-equals out-l (subst2 2 5 6 l) "Replaces the second old atom with the new atom")
  )
)

(in-test-group
  Chapter3:MultiInsert
  (define-test (inserts-to-the-right-of-each-occurrence)
    (define l '(1 3 1 3 1))
    (define out-l '(1 2 3 1 2 3 1 2))
    (assert-equals out-l (multiInsertRight 2 1 l) "Inserts to the right of each occurrence of an atom")
  )
  (define-test (inserts-to-the-left-of-each-occurrence)
    (define l '(1 3 1 3 1))
    (define out-l '(1 2 3 1 2 3 1))
    (assert-equals out-l (multiInsertLeft 2 3 l) "Inserts to the left of each occurrence of an atom")
  )
  (define-test (replaces-each-occurrence)
    (define l '(1 3 1 3))
    (define out-l '(1 2 1 2))
    (assert-equals out-l (multiSubst 2 3 l) "Replaces the each occurrence of the old atom with the new atom")
  )
)

(in-test-group
  Chapter4:BasicMath
  (define-test (add1-does-that)
    (define x 4)
    (assert-equals 5 (add1 4) "Adds 1")
    (assert-equals 5 (add1 x) "Adds 1")
  )
  (define-test (sub1-does-that)
    (define x 4)
    (assert-equals 3 (sub1 4) "Subtracts 1")
    (assert-equals 3 (sub1 x) "Subtracts 1")
  )
  (define-test (addtup-does-that)
    (define t '(1 2 3))
    (assert-equals 6 (addtup t) "Adds all of the numbers in the tuple")
  )
  (define-test (tupplus-does-its-job)
    (define t1 '(1 2 3))
    (define t2 '(3 2 1))
    (assert-equals '(4 4 4) (tup+ t1 t2) "Adds each of the members of the tuple to the equivalent member")
  )
  (define-test (tupplus-does-its-job-for-unbalanced-tuples)
    (define t1 '(1 2 3))
    (define t2 '(3 2 1 4))
    (assert-equals '(4 4 4 4) (tup+ t1 t2) "Should handle unbalanced tuples too")
  )
  (define-test (length-does-its-job)
    (define l '(1 2 3))
    (assert-equals 3 (length l) "Counts the number of atoms in a list")
  )
  (define-test (pick-does-its-job)
    (define l '(5 4 3 2 1))
    (assert-equals 1 (pick 5 l) "Picking the 5th atom should return 1")
  )
  (define-test (rempick-does-its-job)
    (define l '(5 4 6 2 1))
    (assert-equals '(5 4 2 1) (rempick 3 l) "Pick all except pick")
  )
  (define-test (no-nums-does-its-job)
    (define l '(5 "the" 4 "answer" 4 3))
    (assert-equals '("the" "answer") (no-nums l) "Only the non-numeric atoms remain")
  )
  (define-test (all-nums-does-its-job)
    (define l '(5 "the" 4 "answer" 4 3))
    (assert-equals '(5 4 4 3) (all-nums l) "Only the numeric atoms remain")
  )
  (define-test (equiv-atoms-does-its-job)
    (assert-true (equiv-atoms 2 2) "numbers of the same value are the same")
    (define x 2)
    (assert-true (equiv-atoms x 2) "numbers and atoms that share the same value are the same")
    (assert-false (equiv-atoms x 3) "numbers and atoms that don't share the same value are different")
    (assert-false (equiv-atoms 3 2) "numbers that are different are in fact different")
    (assert-true (equiv-atoms "test" 3) "Numbers and other kinds of atoms are different")
  )
  (define-test (occurs-does-its-job)
    (define l '(1 1 1 1))
    (assert-equals 4 (occurs 1 l) "counts the number of occurrences properly")
  )
  (define-test (is-one-does-its-job)
    (assert-true (is-one? 1) "the number one is one")
    (define x 1)
    (assert-true (is-one? x) "atoms with a value of one are one")
    (assert-false (is-one? 3) "other values are not one")
  )
  (define-test (rempick2-does-its-job)
    (define l '(5 4 3 2 1))
    (assert-equals '(5 3 2 1) (rempick2 2 l) "remove second atom")
  )
)

(in-test-group
  Chapter5:ISee*s
  (define-test (removes-all-occurrences)
    (define l (list 1 3 (list 1) 4 (list 4 1)))
    (define out-l (list 3 (list ) 4 (list 4)))
    (assert-equals out-l (rember* 1 l) "rember* removes all occurrences of the atom")
  )
  (define-test (inserts-to-the-right-of-all-occurrences)
    (define l (list 1 3 (list 1) 4 (list 4 1)))
    (define out-l (list 1 2 3 (list 1 2) 4 (list 4 1 2)))
    (assert-equals out-l (insertRight* 2 1 l) "insertRight* inserts to the right of all occurrences")
  )
  (define-test (counts-all-occurrences)
    (define l (list 1 3 (list 1) 4 (list 4 1)))
    (assert-equals 3 (occurs* 1 l) "occurs* counts all occurrences properly")
  )
  (define-test (replaces-all-occurrences)
    (define l (list 1 3 (list 1) 4 (list 4 1)))
    (define out-l (list 2 3 (list 2) 4 (list 4 2)))
    (assert-equals out-l (subst* 2 1 l) "replace all occurrences")
  )
  (define-test (inserts-to-the-left-of-all-occurrences)
    (define l (list 2 3 (list 2) 4 (list 4 2)))
    (define out-l (list 1 2 3 (list 1 2) 4 (list 4 1 2)))
    (assert-equals out-l (insertLeft* 1 2 l) "insertRight* inserts to the right of all occurrences")
  )
  (define-test (membership-is-properly-determined)
    (define l (list 1 2 (list 1) 3 (list 4 2)))
    (assert-true (member* 3 l) "properly identifies top-level occurrences")
    (assert-true (member* 4 l) "properly identifies nested occurrences")
  )
  (define-test (leftmost-works-as-intended)
    (define l (list 1 2 (list 3) 4))
    (assert-equals 1 (leftmost l) "finds the leftmost thing")
    (define l2 (list (list 1 2) 3 4 (list 4 5)))
    (assert-equals 1 (leftmost l) "finds the leftmost thing even if it's in a list")
  )
  (define-test (eqlist-works-as-intended)
    (define l1 (list 1 2 (list 3) 4))
    (define l2 (list 1 2 (list 4) 3))
    (assert-true (eqlist l1 l1) "identical lists are identical")
    (assert-false (eqlist l1 l2) "non-identical lists aren't identical")
  )
  (define-test (equals?-works-as-intended)
    (define x (list 1 2 (list 3) 4))
    (assert-true (equal? x x) "identical lists are equal")
    (define y (list 1 2 (list 4) 3))
    (assert-false (equal? x y) "non-identical lists aren't identical")
    (assert-false (equal? x 3) "atoms vs lists aren't identical")
  )
  (define-test (rember2-removes-whole-s-expressions)
    (define x (list 1 2 (list 3 4) 5))
    (assert-equal (list 1 2 5) (rember2 (list 3 4) x) "remove the s-expression not just the atom")
  )
)
